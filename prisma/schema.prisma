// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Profile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique
  name      String?
  imageUrl  String?  
  email     String?  

  servers   Server[]
  members   Member[]
  channels  Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  imageUrl    String?  
  inviteCode  String   @unique

  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId   String

  members     Member[]
  channels    Channel[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  role      MemberRole @default(GUEST)

  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String

  server   Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId String

  messages Message[]
  dms      DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived Conversation[] @relation("MemberTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  type      ChannelType @default(TEXT)

  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String

  server   Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId String

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String  
  fileUrl   String? 

  member   Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId String

  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId String

  deleted   Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId

  memberOne Member   @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberOneId String

  memberTwo Member   @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  memberTwoId String

  dms      DirectMessage[]

  @@index([memberTwoId])

  @@unique([memberOneId, memberTwoId])
}

model DirectMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String  
  fileUrl   String? 

  member   Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId String

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String

  deleted   Boolean  @default(false)

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@index([memberId])
  @@index([conversationId])
}